So you followed file 1 to do some work and know the command line on one of your computers (work, home)

Then you followed file 2 to upload changes using the Git Hub Desktop interface when changes on github were different than what was on your local computer (ex. I worked at home and then used github desktop to pull changes (refresh files) that I made and had pushed to the github repo.

Now we have done some work on our work machine. In this case I created file 2 about how to pull changes, and now I am writing this new file 3 on how to upload changes using github desktop.

I've created some files, renamed some files, and made changes to files. As I save them they automatically show up in the github desktop under the changes tab, and I can see all of the adds and subtracts that are changing.

When doing code we want to look at this and make sure there are not issues. The "history" will also tell you later what might have happened if something goes wrong with a new commit. If you are concerned about affecting the master you should probably be working in a separate branch (eg. name a branch week2 for all your updates during week 2, then merge that branch into master once you're happy with it).

So here's what we do now:

Review changes and make sure there are no issues and you know what is changing. These changes show up on the left side of the github desktop UI

Add a summary comment, and maybe a more verbose description.
	In this case I'll say something like "adding gh dt instructions"

Press the commit button, which is going to commit the changes to your LOCAL master (or whichever branch you select besides master).

Now you need the remote repository (github) to reflect the same thing that is on your local repository (computer with github desktop interface). So you push the files, which sends it to github and tells them to merge the new files into the master as it is hosted at git hub. Go to Repository -> push.